<?php

use Drupal\user\Entity\User;
use Drupal\node\Entity\NodeType;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function steam_sync_help($route_name, RouteMatchInterface $route_match)
{
    switch ($route_name) {
        case 'help.page.steam_sync':
            return '<p>' . t('Integração com a Steam API para sincronizar jogos da biblioteca.') . '</p>';
    }
}

/**
 * Implements hook_install().
 */
function steam_sync_install()
{
    // Verifique se o tipo de conteúdo "Games" ainda não existe.
    if (!\Drupal::entityTypeManager()->getStorage('node_type')->load('games')) {
        $node_type = NodeType::create([
            'type' => 'games',
            'name' => 'Games',
            'description' => 'Conteúdo de jogos',
            'base' => 'node_content',
            'display_submitted' => FALSE,
        ]);
        $node_type->save();

        // Defina as configurações dos campos personalizados.
        $fields = [
            'field_appid' => ['label' =>'App ID','type'=>'integer'],
            'field_name' => ['label' =>'Game','type'=>'string'],
            'field_playtime' => ['label' =>'Time Played','type'=>'integer'],
            'field_time_last_played' => ['label' =>'Last Time Played','type'=>'datetime'],
        ];

        foreach ($fields as $field_id => $field) {
            // Crie o armazenamento do campo.
            FieldStorageConfig::create([
                'field_name' => $field_id,
                'label' => $field['label'],
                'entity_type' => 'node',
                'type' => $field['type'],
                'cardinality' => 1,
                'translatable' => FALSE,
                'settings' => [],
            ])->save();

            // Associe o campo ao tipo de conteúdo "Games".
            FieldConfig::create([
                'field_name' => $field_id,
                'label' => $field['label'],
                'entity_type' => 'node',
                'bundle' => 'games',
                'settings' => [],
            ])->save();
        }
    }
}

/**
 * Implements hook_uninstall().
 */
function steam_sync_uninstall() {
    // Remova o tipo de conteúdo "Games".
    $node_type = \Drupal::entityTypeManager()->getStorage('node_type')->load('games');
    if ($node_type) {
      $node_type->delete();
    }
  }


/**
 * Implementa uma função para fazer uma solicitação à API da Steam.
 */
function steam_sync_cron()
{
    // Carrega todos os usuários cadastrados.
    $users = User::loadMultiple();
    foreach ($users as $user) {
        $apiKey = $user->get('field_steam_api')->value;
        $steamID = $user->get('field_steam_id')->value;
        \Drupal::logger('steam_sync')->notice('Exec: ' . $apiKey);
        \Drupal::logger('steam_sync')->notice('Exec: ' . $steamID);

        // Verifica se a chave da API da Steam foi configurada.
        // if (empty($apiKey) || empty($steamID)) {
        //     \Drupal::logger('steam_sync')->error(t('Chave da API da Steam não configurada.'));
        //     return;
        // }

        // // Faça uma solicitação à API da Steam aqui usando a chave da API.
        // $url = 'https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/';
        // $params = [
        //     'key' => $apiKey,
        //     'steamid' => $steamID, // Substitua pelo seu Steam ID.
        //     'format' => 'json',
        // ];

        // // // Faça a solicitação HTTP aqui usando a biblioteca http_client do Drupal.
        // $response = \Drupal::httpClient()->get($url, ['query' => $params]);
        // $data = json_decode($response->getBody());

        // // // Processar os dados da resposta da API da Steam aqui.
        // // // Você pode percorrer $data->response->games para obter informações sobre os jogos.

        // // // Exemplo de processamento de dados:
        // foreach ($data->response->games as $game) {
        //     // Faça algo com as informações do jogo, como armazená-las no banco de dados do Drupal.
        //     \Drupal::logger('steam_sync')->notice($game);
        // }
    }
}
